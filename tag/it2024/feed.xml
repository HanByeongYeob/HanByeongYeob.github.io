<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator>
  <link href="https://hby0202.github.io/cpu-blog/tag/it2024/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://hby0202.github.io/cpu-blog/" rel="alternate" type="text/html" />
  <updated>2024-06-11T05:41:18+00:00</updated>
  <id>https://hby0202.github.io/cpu-blog/tag/it2024/feed.xml</id>

  
  
  

  
    <title type="html">CPU - IT Technical | </title>
  

  
    <subtitle>CPU 동호회 IT 기반 공유 블로그</subtitle>
  

  

  
    
      
    
      
    
      
    
      
    
      
    
  

  
  

  
    <entry>
      <title type="html">github-page 만들기(4) - github page 배포</title>
      <link href="https://hby0202.github.io/cpu-blog/it2024-github-page4" rel="alternate" type="text/html" title="github-page 만들기(4) - github page 배포" />
      <published>2024-05-31T00:00:00+00:00</published>
      <updated>2024-05-31T00:00:00+00:00</updated>
      <id>https://hby0202.github.io/cpu-blog/it2024-github-page4</id>
      <content type="html" xml:base="https://hby0202.github.io/cpu-blog/it2024-github-page4">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;it2024 강좌는 여러 절로 구성되어 있습니다.&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./it2024-github-page1&quot;&gt;github-page 만들기(1) - localhost jekyll theme 세팅&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./it2024-github-page2&quot;&gt;github-page 만들기(2) - 환경설정 파일 세팅&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./it2024-github-page3&quot;&gt;github-page 만들기(3) - custom css 세팅&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./it2024-github-page4&quot;&gt;github-page 만들기(4) - github page 배포&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;git-repository-생성&quot;&gt;git repository 생성&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;github 접속 및 로그인&lt;/li&gt;
  &lt;li&gt;repostirory 메뉴 접속 및 New 버튼을 클릭&lt;/li&gt;
  &lt;li&gt;Repository name 작성 후 Create repository&lt;br /&gt;
&lt;strong&gt;※ Repository name은 _config에서 작성한 repo, production_url, source_url, relative_source 영향을 있으므로 repo와 동일하게 작성&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;git-repository-push&quot;&gt;git repository push&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;생성된 repository 접속 후 code 버튼 클릭하여 repository URL 복사&lt;/li&gt;
  &lt;li&gt;vs code에서 TERMINAl 실행&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git init&lt;/code&gt; 명령어 실행&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git remote add origin [git repository]&lt;/code&gt; 명령어 실행&lt;br /&gt;
ex) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git remote add origin https://github.com/hby0202/cpu-blog.git&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git checkout master&lt;/code&gt; 명령어 실행&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git push origin master&lt;/code&gt; 명령어 실행&lt;/li&gt;
  &lt;li&gt;정상적으로 실행되면 github repository에 소스 push 됨&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;branh-생성&quot;&gt;branh 생성&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;생성된 repository 접속 master 버튼 클릭 후 View all branhes 클릭&lt;/li&gt;
  &lt;li&gt;New branch 버튼 클릭 후 New branch name 입력, Source는 master로 선택 후 Create new branch 클릭&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;personal-access-tokens-발급&quot;&gt;Personal access tokens 발급&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;우측 상단 프로필 이미지 클릭 후 Settings 메뉴로 이동&lt;/li&gt;
  &lt;li&gt;Developer settings 클릭 후 Personal access tokens &amp;gt; Tokens(classic) 클릭&lt;/li&gt;
  &lt;li&gt;Generate new token &amp;gt; Generate new token(classic) 클릭&lt;/li&gt;
  &lt;li&gt;note에 token에 대한 설명 적고 workflow 선택 후 generate token 클릭&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;token 값은 지금에만 보이고 이후에는 못보니 꼭 복사하기&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;블로그-사용을-위한-github-action-세팅&quot;&gt;블로그 사용을 위한 github action 세팅&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;생성한 repository 접속 후 settings로 접속&lt;/li&gt;
  &lt;li&gt;Repository name을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[username].github.io&lt;/code&gt; 으로 입력 후 rename 클릭&lt;br /&gt;
ex) hby0202.github.io&lt;/li&gt;
  &lt;li&gt;pages 메뉴에 들어가 github 페이지가 생성되면 brach를 생성 했던 &lt;strong&gt;New branch name&lt;/strong&gt; 명칭으로 변경&lt;/li&gt;
  &lt;li&gt;General에 다시 접속 후 repository name을 원래 Repository 명으로 변경&lt;/li&gt;
  &lt;li&gt;Actions &amp;gt; General 메뉴 접속 후 Workflow permissions에서 Read and write permissions으로 변경&lt;/li&gt;
  &lt;li&gt;Secrets and variables &amp;gt; Actions 접속 후 new repository secret 클릭&lt;/li&gt;
  &lt;li&gt;name에 명칭을 작성하고 &lt;strong&gt;Secret에서 복사한 Token 값을 붙여놈&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;workflows-파일-수정&quot;&gt;workflows 파일 수정&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;vs code 혹은 github &amp;gt; code 메뉴에 접속 또는 실행 하여 jekyll_build.yml 파일 수정
```
name: Build and deploy to GitHub Pagesa&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]&lt;/p&gt;

&lt;p&gt;jobs:
  github-pages:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  - name: Set up Ruby
    uses: ruby/setup-ruby@v1
    with:
      ruby-version: &apos;3.1.5&apos;

  - name: Install dependencies
    run: |
      gem install bundler
      bundle install

  - name: Build site
    run: bundle exec jekyll build

  - name: Deploy to GitHub Pages
    uses: peaceiris/actions-gh-pages@v3
    with:
      github_token: $
      publish_dir: ./output/
      target_branch: &apos;gh-pages&apos; ```    **target_branch를 생성 했던 branch name 명칭으로 변경**
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;해당 파일을 저장하여 repostory에 push하면 gitAction가 자동으로 실행&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;해당-과정까지-완료되면-repostory의-master-branch에-push-또는-pull을하면-자동으로-새로-만든-brach에-deploy하여-github-page가-최신화-됨&quot;&gt;해당 과정까지 완료되면 repostory의 master branch에 push 또는 pull을하면 자동으로 새로 만든 brach에 deploy하여 github page가 최신화 됨&lt;/h3&gt;</content>

      
      
      
      
      

      <author>
          <name>한병엽</name>
        
        
      </author>

      

      
        <category term="IT2024" />
      

      
        <summary type="html">it2024 강좌는 여러 절로 구성되어 있습니다. github-page 만들기(1) - localhost jekyll theme 세팅 github-page 만들기(2) - 환경설정 파일 세팅 github-page 만들기(3) - custom css 세팅 github-page 만들기(4) - github page 배포</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">github-page 만들기(3) - custom css 세팅</title>
      <link href="https://hby0202.github.io/cpu-blog/it2024-github-page3" rel="alternate" type="text/html" title="github-page 만들기(3) - custom css 세팅" />
      <published>2024-05-31T00:00:00+00:00</published>
      <updated>2024-05-31T00:00:00+00:00</updated>
      <id>https://hby0202.github.io/cpu-blog/it2024-github-page3</id>
      <content type="html" xml:base="https://hby0202.github.io/cpu-blog/it2024-github-page3">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;it2024 강좌는 여러 절로 구성되어 있습니다.&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./it2024-github-page1&quot;&gt;github-page 만들기(1) - localhost jekyll theme 세팅&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./it2024-github-page2&quot;&gt;github-page 만들기(2) - 환경설정 파일 세팅&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./it2024-github-page3&quot;&gt;github-page 만들기(3) - custom css 세팅&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./it2024-github-page4&quot;&gt;github-page 만들기(4) - github page 배포&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;custom-css-추가&quot;&gt;Custom css 추가&lt;/h1&gt;
&lt;p&gt;assets &amp;gt; css에 custom.css 파일 추가&lt;br /&gt;
css 내용 작성&lt;br /&gt;
custom.css 예시&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/* Search 결과화면ㅇ르 위한 CSS 설정 시작 */
ul.mylist li, ol.mylist li {
    padding: 5px 0px 5px 5px;
    margin-bottom: 5px;
    border-bottom: 1px solid #efefef;
    font-size: 12px;
}

ul.mylist li:last-child, ol.mylist li:last-child{
    border-bottom: 0px;
}

ul.mylist li, ol.mylist li{
    -webkit-transition: background-color 0.3s linear;
    -moz-transition: background-color 0.3s linear;
    -ms-transition: background-color 0.3s linear;
    -o-transition: background-color 0.3s linear;
    transition: background-color 0.3s linear;
}

ul.mylist li:hover, ol.mylist li:hover{
    background-color: #f6f0b6;
}

/* 링크뒤쪽에 FontAwesome표현을 위한 custom CSS*/
.post-full-content a[target=&quot;_blank&quot;]::after{
    content: &apos;\1f517&apos;;
    display: inline-block;
    margin: 0 2px 0 4px;
    line-height: 1;
    font-family: &quot;FontAwesome&quot;;
    font-size: 2rem;
    font-weight: normal;
    font-style: normal;
}

/* 강좌 table of contents(목차)를 위한 custom css */
span.table-of-contents-list {
    margin: 0px;
    padding: 0px;
    max-width: 250px;
    width: 100%;
    border-bottom: 1px solid #efefef;
    font-size: 18px;
    font-weight: bold;
    color: #ce180b;
    font-family: Georgia, &apos;Nanum Gothic&apos;, serif !important;
}

ul.table-of-contents-list, ol.table-of-contents-list{
    list-style: none;
    margin: 0px;
    padding: 0px;
    max-width: 250px;
    width: 100%;
    font-family: Georgia, &apos;Nanum Gothic&apos;, serif !important;
}

ul.table-of-contents-list li, ol.table-of-contents-list li{
    padding: 0px 0px 5px 5px;
    margin-bottom: 5px;
    font-size: 15px;

}

ul.table-of-contents-list li a, ol.table-of-contents-list li a{
    text-decoration: none;
    color: color(var(--midgrey) l(-25%));
    font-weight: bold;
}

ul.table-of-contents-list li a:hover, ol.table-of-contents-list li a:hover{
    color: #c2255c;
    text-decoration: none;
    font-weight: bold;
}

ul.table-of-contents-list li:last-child, ol.table-of-contents-list li:last-child{
    border-bottom: 0px;
}

ul.table-of-contents-list li:before, ol.table-of-contents-list li:before{
    content: &apos;\2022&apos;;
    display: inline-block;
    margin: 0 2px 0 4px;
    line-height: 1;
    font-family: &quot;FontAwesome&quot;;
    font-size: 2rem;
    font-weight: normal;
    font-style: normal;
    vertical-align: middle;
    padding: 5px 5px 6px 0px;
}

/* 가로방향의 리스트를위한 custom css */
ul.font-awesome-list, ol.font-awesome-list{
    list-style: none;
    margin: 0px;
    padding: 0px;
    max-width: 250px;
    width: 100%;
}

ul.font-awesome-list li, ol.font-awesome-list li{
    padding: 5px 0px 5px 5px;
    margin-bottom: 5px;
    border-bottom: 1px solid #efefef;
    font-size: 18px;
}

ul.font-awesome-list li span.icon-name, ol.font-awesome-list li span.icon-name{
    padding: 0px 10px;
}

ul.font-awesome-list li span.icon-value, ol.font-awesome-list li span.icon-value{
    padding: 0px 10px;
    color: #c2255c;
    font-size: 15px;
}

ul.font-awesome-list li, ol.font-awesome-list li{
    -webkit-transition: background-color 0.3s linear;
    -moz-transition: background-color 0.3s linear;
    -ms-transition: background-color 0.3s linear;
    -o-transition: background-color 0.3s linear;
    transition: background-color 0.3s linear;
}

ul.font-awesome-list li:hover, ol.font-awesome-list li:hover{
    background-color: #f6f6f6;
}

/* tl; dr 이미지를 위한 custom style. 각 글의 첫 이미지로 등작 - 사용하지 않음 */
.myTLDRstyle{
    display: inline !important;
    margin-bottom: -0.5em !important;
    width: 100%;
}

/* 각 포스트의 시작Introduction을 위한 fontAwesome */
strong.post_introduction::before{
    content: &apos;\f086&apos;;
    display: inline-block;
    margin: 0 2px 0 4px;
    line-height: 1;
    font-family: &quot;FontAwesome&quot;;
    font-size: 3rem;
    font-weight: normal;
    font-style: normal;
    vertical-align: middle;
    padding: 0px 5px 6px 0px;
    color: teal;
}

/* 포스트의 subtitle을 위한 fontAwesome */
strong.subtitle_introduction::before{
    content: &apos;\f0a4&apos;;
    display: inline-block;
    margin: 0 2px 0 4px;
    line-height: 1;
    font-family: &quot;FontAwesome&quot;;
    font-size: 3rem;
    font-weight: normal;
    font-style: normal;
    vertical-align: middle;
    padding: 0px 5px 6px 0px;
    color: teal;
}

/* 포스트의 subtitle안에 단락제목을 위한 fontAwesome */
strong.subtitle2_fontAwesome::before{
    content: &apos;\f13a&apos;;
    display: inline-block;
    margin: 0 2px 0 4px;
    line-height: 1;
    font-family: &quot;FontAwesome&quot;;
    font-size: 3rem;
    font-weight: normal;
    font-style: normal;
    vertical-align: middle;
    padding: 0px 5px 6px 0px;
    color: teal;
}

/* 강좌 최하단 Reference를 위한 custom css */
span.lecture-reference{
    margin: 0px;
    padding: 0px;
    max-width: 250px;
    width: 100%;
    border-bottom: 0px solid #efefef;
    font-size: 18px;
    font-weight: bold;
    color: #0e16ce
}

/* All Tags 화면을 위한 폰트 크기 설정 custom css */
.alltags{
    font-size: 18px;
    font-weight: bold;
    color:#ce112a
}

ul.lecture-reference{
    list-style: none;
    margin: 0px;
    padding: 0px;
    max-width: 250px;
    width: 100%;
}

ul.lecture-reference li{
    padding: 0px 0px 5px 5px;
    margin-bottom: 5px;
    font-size: 15px;
    font-weight: bold;
}

ul.lecture-reference li a{
    text-decoration: none;
    color: color(var(--midgrey) l(-25%));
}

ul.lecture-reference li a:hover {
    color: #c2255c;
    text-decoration: none;
    font-weight: bold;
}

ul.lecture-reference li:last-child{
    border-bottom: 0px;
}

ul.lecture-reference li:before{
    content: &apos;\F02b&apos;;
    display: inline-block;
    margin: 0 2px 0 4px;
    line-height: 1;
    font-family: &quot;FontAwesome&quot;;
    font-size: 2rem;
    font-weight: normal;
    font-style: normal;
    vertical-align: middle;
    padding: 0px 5px 6px 0px;
}

/* 이미지 출처를표현하기 위한 custom css*/
img-reference {
    font-size: 1.5rem !important;
    text-align: center;
    font-weight: bold;
    margin-top: -40px;
    margin-bottom: 30px;
}

/* 메뉴 표현을 위한 css*/

/* DL Menu In/Out
=======================================================================================================================================
*/
@-webkit-keyframes MenuAnimOut {
    100% {
        -webkit-transform: translateZ(300px);
        opacity: 0;
    }
}

@-moz-keyframes MenuAnimOut {
    100% {
        -moz-transform: translateZ(300px);
        opacity: 0;
    }
}

@keyframes MenuAnimOut {
    100% {
        transform: translateZ(300px);
        opacity: 0;
    }
}

@-webkit-keyframes MenuAnimIn {
    0% {
        -webkit-transform: translateZ(300px);
        opacity: 0;
    }
    100% {
        -webkit-transform: translateZ(0px);
        opacity: 1;
    }
}

@-moz-keyframes MenuAnimIn {
    0% {
        -moz-transform: translateZ(300px);
        opacity: 0;
    }
    100% {
        -moz-transform: translateZ(0px);
        opacity: 1;
    }
}

@keyframes MenuAnimIn {
    0% {
        transform: translateZ(300px);
        opacity: 0;
    }
    100% {
        transform: translateZ(0px);
        opacity: 1;
    }
}

@-webkit-keyframes SubMenuAnimIn {
    0% {
        -webkit-transform: translateZ(-300px);
        opacity: 0;
    }
    100% {
        -webkit-transform: translateZ(0px);
        opacity: 1;
    }
}

@-moz-keyframes SubMenuAnimIn {
    0% {
        -moz-transform: translateZ(-300px);
        opacity: 0;
    }
    100% {
        -moz-transform: translateZ(0px);
        opacity: 1;
    }
}

@keyframes SubMenuAnimIn {
    0% {
        transform: translateZ(-300px);
        opacity: 0;
    }
    100% {
        transform: translateZ(0px);
        opacity: 1;
    }
}

@-webkit-keyframes SubMenuAnimOut {
    0% {
        -webkit-transform: translateZ(0px);
        opacity: 1;
        
    }
    100% {
        -webkit-transform: translateZ(-300px);
        opacity: 0;
    }
}

@-moz-keyframes SubMenuAnimOut {
    0% {
        -moz-transform: translateZ(-0px);
        opacity: 1;
    }
    100% {
        -moz-transform: translateZ(-300px);
        opacity: 0;
    }
}

@keyframes SubMenuAnimOut {
    0% {
        transform: translateZ(-0px);
        opacity: 1;
    }
    100% {
        transform: translateZ(-300px);
        opacity: 0;
    }
}

.dl-menuwrapper {
    position: absolute;
    top: 0;
    left: 0;
    z-index: 1000;
    -webkit-perspective: 1000px;
    -moz-perspective: 1000px;
    perspective: 1000px;
    -webkit-perspective-origin: 50% 200%;
    -moz-perspective-origin: 50% 200%;
    perspective-origin: 50% 200%;
    /* Hide the inner submenus */
}

@media only screen and (min-width: 48em){
    .dl-menuwrapper {
        position: fixed;
        max-width: 175px;
        top: 25px;
        left: 25px;
    }
}
.dl-menuwrapper.dl-menuopen{
    width: 100%;
    height: 100%;
}
.dl-menuwrapper button {
    top: 0;
    left: 0;
    background: #222222;
    border: none;
    width: 48px;
    height: 45px;
    text-indent: -900em;
    overflow: hidden;
    position: relative;
    cursor: pointer;
    outline: none;
    border-radius: 0 0 3px 0;
    opacity: 0.6;
    box-shadow: 0 12px 24px rgba(0, 0, 0, 0.4);
    transition: 0.4s ease-in-out;
}

.dl-menuwrapper button:hover{
    opacity: 1;
}
@media only screen and (min-width: 48em){
    .dl-menuwrapper button {
        border-radius: 3px;
    }
}

.dl-menuwrapper button:hover,
.dl-menuwrapper button.dl-active,
.dl-menuwrapper ul{
    background: #aaa;
}

.dl-menuwrapper button::after{
    content: &apos;&apos;;
    position: absolute;
    width: 68px;
    height: 5px;
    background: #fff;
    top: 10px;
    left: 16%;
    box-shadow: 0 10px 0 #fff, 0 20px 0 #fff;
}

.dl-menuwrapper ul {
    padding: 0;
    list-style: none;
    -webkit-transform-style: preserve-3d;
    -moz-transform-style: preserve-3d;
    transform-style: preserve-3d;
}

.dl-menuwrapper li {
    position: relative;
}

.dl-menuwrapper li h4{
    margin: 0;
    padding: 15px 20px 0;
    color: rgba(255, 255, 255, 0.9);
}

.dl-menuwrapper li p{
    margin: 0;
    padding: 15px 20px;
    font-size: 14px;
    font-size: 0.875rem;
    color: rgba(255, 255, 255, 0.8);
    font-weight: 300;
}

.dl-menuwrapper li p a{
    display: inline;
    padding: 0;
    font-size: 14px;
}

.dl-menuwrapper li a{
    display: block;
    position: relative;
    padding: 15px 20px;
    font-size: 14px;
    line-height: 20px;
    font-weight: 400;
    color: #fff;
}

.dl-menuwrapper li.dl-back a{
    padding-left: 30px;
    background: rgba(0, 0, 0, 0.0);
}

.dl-menuwrapper li.dl-back:after, .dl-menuwrapper li a:not(:only-child):after{
    position: absolute;
    top: 0;
    line-height: 50px;
    font-family: &quot;fontawesome&quot;;
    color: #fff;
    speak-as: none;
    -webkit-font-smoothing: antialiased;
    content: &apos;\f105&apos;;
}

.dl-menuwrapper li.dl-back:after{
    left: 10px;
    color: rgba(212, 204, 198, 0.5);
    -webkit-transform: rotate(180deg);
    -moz-transform: rotate(180deg);
    transform: rotate(180deg);
}

.dl-menuwrapper li &amp;gt; a:after{
    right: 10px;
    color: rgba(0, 0, 0, 0.15);
}

.dl-menuwrapper .dl-menu{
    margin: 5px 0 0 0;
    position: relative;
    width: 100%;
    max-height: 90%;
    overflow-y: auto;
    overflow-x: hidden;
    opacity: 0;
    pointer-events: none;
    box-shadow: 0 12px 24px rgba(0, 0, 0, 0.4);
    -webkit-transform: translateY(10ox);
    -moz-transform: translateY(10ox);
    transform: translateY(10ox);
    -webkit-backface-visibility: hidden;
    -moz-backface-visibility: hidden;
    backface-visibility: hidden;
    z-index: inherit;
}

@media only screen and (min-width: 48em){
    .dl-menuwrapper .dl-menu{
        border-radius: 3px;
    }
}

.dl-menuwrapper .dl-menu.dl-menu-toggle{
    -webkit-transition: all 0.3s ease;
    -moz-transition: all 0.3s ease;
    transition: all 0.3s ease;
}

.dl-menuwrapper .dl-menu.dl-menuopen{
    opacity: 1;
    pointer-events: auto;
    background-color: #062c33;
    -webkit-transform: translateY(0px);
    -moz-transform: translateY(0px);
    transform: translateY(0px);
}

.dl-menuwrapper .dl-submenu{
    border-radius: 3px;
    box-shadow: 0 12px 24px rgba(0, 0, 0, 0.0);
}

.dl-menuwrapper .dl-submenu .btn, .dl-menuwrapper .dl-submenu .read-more-header a{
    margin-bottom: 0;
}

.dl-menuwrapper li .dl-submenu{
    display: none;
}


/*
When a submenu is opend, we will hide all li siblings
For that we give a class to the parent menu called &quot;dl-subview&quot;
We also hide the submenu link.
The opened submenu will get the class &quot;dle-subviewopen&quot;
All this is done for any sub-level being entered.
*/
.dl-menu.dl-subview li, .dl-menu.dl-subview li.dl-subviewopen &amp;gt; a, .dl-menu.dl-subview li.del-subview &amp;gt; a{
    display: none;
    background-color: #062c33;
}

.dl-menu.dl-menu.dl-subview li.dl-subview,
.dl-menu.dl-menu.dl-subview li.dl-subview .dl-submenu,
.dl-menu.dl-menu.dl-subview li.dl-subviewopen,
.dl-menu.dl-menu.dl-subview li.dl-subviewopen &amp;gt; .dl-submenu
.dl-menu.dl-menu.dl-subview li.dl-subviewopen &amp;gt; .dl-submenu &amp;gt; li {
    display: block;
    background-color: #062c33;
}

/* Animation classes ofr moving out and in */
.dl-menu.dl-animate-out {
    -webkit-animation: MenuAnimOut 0.4s ease;
    -moz-animation: MenuAnimOut 0.4s ease;
    animation: MenuAnimOut 0.4s ease;
}


.dl-menu.dl-animate-in {
    -webkit-animation: MenuAnimIn 0.4s ease;
    -moz-animation: MenuAnimIn 0.4s ease;
    animation: MenuAnimIn 0.4s ease;
}

.dl-menuwrapper &amp;gt; .dl-submenu.dl-animate-in {
    -webkit-animation: SubMenuAnimIn 0.4s ease;
    -moz-animation: SubMenuAnimIn 0.4s ease;
    animation: SubMenuAnimIn 0.4s ease;
}

.dl-menuwrapper &amp;gt; .dl-submenu.dl-animate-out {
    -webkit-animation: SubMenuAnimOut 0.4s ease;
    -moz-animation: SubMenuAnimOut 0.4s ease;
    animation: SubMenuAnimOut 0.4s ease;
}

/* No TOuch Fallback*/
.no-touch .dl-menuwrapper li a:hover{
    background: rgba(255, 248, 213, 0.1);
}

/* No JS Fallback*/
.no-js .dl-trigger {
    display: none;
}
.no-js dl-menuwrapper{
    position: inherit;
}

@media only screen and (min-width: 48em){
    .no-js .dl-menuwrapper{
        position: absolute;
    }
}

.no-js .dl-menuwrapper .dl-menu{
    position: relative;
    opacity: 1;
    pointer-events: auto;
    -webkit-transform: none;
    -moz-transform: none;
    transform: none;
}

.no-js .dl-menuwrapper li .dl-submenu{
    display: block;
}

.no-js .dl-menuwrapper li .dl-back{
    display: none;
}

.no-js .dl-menuwrapper li a:not(:only-child){
    background: rgba(0, 0, 0, 0.1);
}

.no-js .dl-menuwrapper li a:not(:only-child)::after{
    content: &apos;&apos;;
}

.no-js .dl-menu{
    max-height: 100%;
}
.no-js .dl-menu li {
    display: block;
}

.dl-menuwrapper button:hover,
.dl-menuwrapper button.dl-active,
.dl-menuwrapper ul{
    background: #222222;
}

.dl-menu li {
    display: none;
}

.dl-menuopen li {
    display: block;
}

/* Tags Archive 화면을 위한 css 처리*/
.entry-meta{
    font-size: 12px;
    font-size: 0.75rem;
    text-transform: uppercase;
    color: rgba(187, 187, 187, 0.8);
}

.entry-meta a{
    color: rgba(187, 187, 187, 0.8);
}

.entry-meta .vcard:before{
    content: &apos; by &apos;;
}

.entry-meta .tag{
    display: inline-block;
    margin: 4px;
    color: #fff;
    border-radius: 3px;
    background-color: rgba(162, 162, 162, 0.8);
}

.entry-meta .tag span{
    float: left;
    padding: 2px 6px;
    color: black;
    font-family: inherit;
    background-color: aliceblue;
}

.entry-meta .tag .count {
    background-color: rgba(136, 136, 136, 0.8);
    border-radius: 0 3px 3px 0;
}

.entry-meta .tag:hover{
    background-color: rgba(136, 136, 136, 0.8);
}

.entry-meta .entry-reading-time {
    float: right;
}

.inline-list {
    list-style: none;
    margin-left: 0;
    padding-left: 0;
}

.inline-list li{
    list-style-type: none;
    display: inline;
}

#post-index.feature .header-title{
    height: 400px;
}

#post-index .entry-image{
    min-height: 400px;
}

#post-index .entry-image img{
    min-height: 400px;
}

#post-index #main{
    margin: 40px 2px 20px 2px;
}

@media only screen and (min-width: 48em){
    #post-index #main{
        margin-left: 20px;
        margin-right: 20px;
    }
}

@media only screen and (min-width: 62.5em){
    #post-index #main{
        max-width: 800px;
        margin-top: 50px;
        margin-left: auto;
        margin-right: auto;
    }
}

#post-index article {
    background-color: #fff;
    box-shadow: 0 0 0 0, 0 6px 12px rgba(34, 34, 34, 0.1);
    border-radius: 3px;
    margin-bottom: 20px;
    padding:25px 15px;
}

@media only screen and (min-width: 48em){
    #post-index article {
        padding: 30px;
    }
}

@media only screen and (min-width: 62.5em){
    #post-index article {
        margin-bottom: 30px;
        padding: 50px 80px;
    }
}

.entry-title {
    font-size: large성
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h1 id=&quot;node-js-설치&quot;&gt;Node js 설치&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://nodejs.org/en/download/prebuilt-installer&quot;&gt;node js 설치 페이지&lt;/a&gt; 에 접속&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;node-v11.15.0 버전 설치&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;gulp-js-파일-작성&quot;&gt;gulp js 파일 작성&lt;/h1&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var gulp = require(&apos;gulp&apos;);

// gulp plugins and utils
var gutil = require(&apos;gulp-util&apos;);
var postcss = require(&apos;gulp-postcss&apos;);
var sourcemaps = require(&apos;gulp-sourcemaps&apos;);
var imagemin = require(&apos;gulp-imagemin&apos;);

// postcss plugins
var autoprefixer = require(&apos;autoprefixer&apos;);
var colorFunction = require(&apos;postcss-color-function&apos;);
var cssnano = require(&apos;cssnano&apos;);
var customProperties = require(&apos;postcss-custom-properties&apos;);
var easyimport = require(&apos;postcss-easy-import&apos;);

gulp.task(&apos;images&apos;, function(){
    return gulp.src(&apos;assets/images/*&apos;)
    .pipe(imagemin())
    .pipe(gulp.dest(&apos;assets/built/images/&apos;))
});

gulp.task(&apos;css&apos;, function () {
    var processors = [
        easyimport,
        customProperties,
        colorFunction(),
        autoprefixer({browsers: [&apos;last 2 versions&apos;]}),
        cssnano()
    ];

    return gulp.src(&apos;assets/css/*.css&apos;)
        .pipe(sourcemaps.init())
        .pipe(postcss(processors))
        .pipe(sourcemaps.write(&apos;.&apos;))
        .pipe(gulp.dest(&apos;assets/built/&apos;))
});

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;packagejson-수정&quot;&gt;package.json 수정&lt;/h1&gt;
&lt;p&gt;package.json을 작성하여 npm install 시 package.json 작성된 파일, 버전으로 다운로드 설정함&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
    &quot;name&quot;: &quot;blog&quot;,
    &quot;description&quot;: &quot;&quot;,
    &quot;version&quot;: &quot;1.0.0&quot;,
    &quot;engines&quot;: {
        &quot;ghost&quot;: &quot;&amp;gt;=1.2.0&quot;
    },
    &quot;license&quot;: &quot;MIT&quot;,
    &quot;devDependencies&quot;: {
        &quot;autoprefixer&quot;: &quot;7.2.6&quot;,
        &quot;cssnano&quot;: &quot;^3.10.0&quot;,
        &quot;graceful-fs&quot;: &quot;^4.1.11&quot;,
        &quot;gulp&quot;: &quot;^3.9.1&quot;,
        &quot;gulp-imagemin&quot;: &quot;^4.1.0&quot;,
        &quot;gulp-postcss&quot;: &quot;^7.0.1&quot;,
        &quot;gulp-sourcemaps&quot;: &quot;^2.6.5&quot;,
        &quot;gulp-util&quot;: &quot;^3.0.8&quot;,
        &quot;minimatch&quot;: &quot;^3.0.4&quot;,
        &quot;postcss-color-function&quot;: &quot;^4.0.1&quot;,
        &quot;postcss-custom-properties&quot;: &quot;^6.3.1&quot;,
        &quot;postcss-easy-import&quot;: &quot;^3.0.0&quot;
    },
    &quot;config&quot;: {
        &quot;posts_per_page&quot;: 25
    }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;gulp-사용하기-위한-설치&quot;&gt;gulp 사용하기 위한 설치&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;터미널에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm install&lt;/code&gt; 명령어 실행&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gulp css&lt;/code&gt; 실행&lt;/li&gt;
  &lt;li&gt;실행이 완료 되면 assets &amp;gt; built 폴더에 custom.css 추가 됨&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;※ 참고&lt;br /&gt;
 &lt;a href=&quot;https://youtu.be/acVpibElHZ8?si=ByWr3BBIh_Ux8NQ-&quot;&gt;(YouTube) Jekyll 기반의 GitHub Page 생성(2-5) post목차 설정&lt;/a&gt;&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>한병엽</name>
        
        
      </author>

      

      
        <category term="IT2024" />
      

      
        <summary type="html">it2024 강좌는 여러 절로 구성되어 있습니다. github-page 만들기(1) - localhost jekyll theme 세팅 github-page 만들기(2) - 환경설정 파일 세팅 github-page 만들기(3) - custom css 세팅 github-page 만들기(4) - github page 배포</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">github-page 만들기(2) - 환경설정 파일 세팅</title>
      <link href="https://hby0202.github.io/cpu-blog/it2024-github-page2" rel="alternate" type="text/html" title="github-page 만들기(2) - 환경설정 파일 세팅" />
      <published>2024-05-31T00:00:00+00:00</published>
      <updated>2024-05-31T00:00:00+00:00</updated>
      <id>https://hby0202.github.io/cpu-blog/it2024-github-page2</id>
      <content type="html" xml:base="https://hby0202.github.io/cpu-blog/it2024-github-page2">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;it2024 강좌는 여러 절로 구성되어 있습니다.&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./it2024-github-page1&quot;&gt;github-page 만들기(1) - localhost jekyll theme 세팅&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./it2024-github-page2&quot;&gt;github-page 만들기(2) - 환경설정 파일 세팅&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./it2024-github-page3&quot;&gt;github-page 만들기(3) - custom css 세팅&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./it2024-github-page4&quot;&gt;github-page 만들기(4) - github page 배포&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;_config-파일-세팅&quot;&gt;_config 파일 세팅&lt;/h1&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Jekyll configuration
markdown: kramdown
# kramdown : markdown의 개조판
# markdown에서 불편한 사항을 개선한 형태

highlighter: rouge
# text highlighter로 rouge이용
# 2016.02 이후로 syntax highlighter는 rouge만 지원
# Pygments 사용불가.

paginate: 20
# 작성한 모든 post를 하나의 페이지에 열거할 수 없으니 pagination이 필요하고 몇개의 post를 하나의 page에서 보여줄 건지를 설정

language: &apos;en-uk&apos;
# 언어 설정

baseurl: /cpu-blog/ 
# url 뒤에 붙는 contextPath
url : https://hby0202.github.io
# 기본이 되는 url gitpage를사용하므로 [username].github.io로 고정

# Website info
title: CPU - IT Technical
# Website 제목
description: CPU 동호회 IT 기반 공유 블로그
# Website 설명
cover: assets/images/blog-cover.jpg
# cover 이미지
logo: assets/images/blog-icon.png
# log 이미지
logo_dark: assets/images/favicon.png
favicon: assets/images/favicon.png
CNAME: #add cname for website to be created

# Social info
navigation: True # show the navbar links
subscribers: True # you need to connect an external service for this to work,
# if &apos;True&apos; the submit button is disabled for now, but you can change that
# by editing `_includes/subscribe-form.html`
# twitter:  # replace by your username
# facebook:  # replace by your username

# Disqus
disqus: False
disqus_shortname: jekyllt # replace with your disqus username

# Google Analytics
# google_analytics: UA-69281367-1 # replace with your GA tracking identifier

# Permalinks
permalink: /:title
# post md 파일 생성 시 url 생성 방식
# permalink: /author/:author
# permalink: /tag/:tag

# Authors&apos; info in `_data/authors.yml`
# Tags&apos; info in `_data/tags_info.yml`

# gems and other configs
plugins_dir: [_plugins]
plugins: [jekyll-paginate, jekyll-feed]

feed:
  path: feed.xml

# Additional settings available on the front-matter
# Site logo in the index.html (as in demo.ghost.io)
# Author&apos;s page cover in _layouts/author.html
# The same for page.html and tag.html layouts
# Post&apos;s page cover as a per-post basis _posts/...
# Disqus comments as a per-post basis
# ...

# Settings for building master branch with travis-ci
# with jekyll-travis

# Settings for deploy rake task
# Username and repo of Github repo, e.g.
# https://github.com/USERNAME/REPO.git
# username defaults to ENV[&apos;GIT_NAME&apos;] used by Travis
# repo defaults to USERNAME.github.io
# Branch defaults to &quot;source&quot; for USERNAME.github.io
# or &quot;master&quot; otherwise
safe: False
lsi: False
username: hby0202
# github username
repo: cpu-blog
# github ropository 명칭
branch: master
# branch 명칭
relative_source: ../cpu-blog/
destination: ./output/
# deploay 폴더 위치
production_url:  https://hby0202.github.io/cpu-blog/
# repository url
source_url:  https://github.com/hby0202/cpu-blog/
# 사이트 url

#제외 파일 설정
exclude:
  - assets/css
  - node_modules
  - vendor
  - .travis.yml
  - Gemfile
  - Gemfile.lock
  - GHOST.txt
  - gulpfile.js
  - LICENSE
  - package.json
  - package-lock.json
  - Rakefile
  - README.md
  - script.py
  - changelog.md
  - &quot;*.Rmd&quot;
  - .git*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h1 id=&quot;authors-설정&quot;&gt;Authors 설정&lt;/h1&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ghost:
  username: ghost # 사용자아이디
  name: Ghost # 사용자 명
  url_full: http://jekyllt.github.io/jasper2/ # 홈페이지 URL
  url: jekyllt.github.io/jasper2 # 홈페이지 URL
  bio: The professional publishing platform # 설명
  picture: assets/images/ghost.png # 해당 아이디 이미지
  facebook: ghost
  twitter: tryghost
  cover: False

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h1 id=&quot;tag-설정&quot;&gt;tag 설정&lt;/h1&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;it2024:
  name: it2024 # 태그 명
  description: 2024년 작성글 # 태그 설명
  cover: assets/images/speeches.jpg # 태그 이미지
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;메뉴-수정&quot;&gt;메뉴 수정&lt;/h1&gt;
&lt;p&gt;_includes &amp;gt; navigation.html 파일 수정&lt;br /&gt;
예시&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;ul class=&quot;nav&quot; role=&quot;menu&quot;&amp;gt;
    &amp;lt;li class=&quot;nav-home&quot; role=&quot;menuitem&quot;&amp;gt;&amp;lt;a href=&quot;/cpu-blog/&quot;&amp;gt;Home&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li class=&quot;nav-about&quot; role=&quot;menuitem&quot;&amp;gt;&amp;lt;a href=&quot;/cpu-blog/about/&quot;&amp;gt;게시글 작성법&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li class=&quot;nav-it2024&quot; role=&quot;menuitem&quot;&amp;gt;&amp;lt;a href=&quot;/cpu-blog/tag/it2024/&quot;&amp;gt;2024&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;※ 참고&lt;br /&gt;
 &lt;a href=&quot;https://youtu.be/OO5IZrx1ZVE?si=AZ373cFDJgklqOOD&quot;&gt;(YouTube) Jekyll 기반의 GitHub Page 생성(2-1) - 환경설정파일&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://youtu.be/Ohrc__9z694?si=gsJtllqbKwmL99Pd&quot;&gt;(YouTube) Jekyll 기반의 GitHub Page 생성(2-2) author와 tags 설정&lt;/a&gt;&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>한병엽</name>
        
        
      </author>

      

      
        <category term="IT2024" />
      

      
        <summary type="html">it2024 강좌는 여러 절로 구성되어 있습니다. github-page 만들기(1) - localhost jekyll theme 세팅 github-page 만들기(2) - 환경설정 파일 세팅 github-page 만들기(3) - custom css 세팅 github-page 만들기(4) - github page 배포</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">github-page 만들기(1) - localhost jekyll theme 세팅</title>
      <link href="https://hby0202.github.io/cpu-blog/it2024-github-page1" rel="alternate" type="text/html" title="github-page 만들기(1) - localhost jekyll theme 세팅" />
      <published>2024-05-31T00:00:00+00:00</published>
      <updated>2024-05-31T00:00:00+00:00</updated>
      <id>https://hby0202.github.io/cpu-blog/it2024-github-page1</id>
      <content type="html" xml:base="https://hby0202.github.io/cpu-blog/it2024-github-page1">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;it2024 강좌는 여러 절로 구성되어 있습니다.&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./it2024-github-page1&quot;&gt;github-page 만들기(1) - localhost jekyll theme 세팅&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./it2024-github-page2&quot;&gt;github-page 만들기(2) - 환경설정 파일 세팅&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./it2024-github-page3&quot;&gt;github-page 만들기(3) - custom css 세팅&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./it2024-github-page4&quot;&gt;github-page 만들기(4) - github page 배포&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;ruby-다운로드&quot;&gt;Ruby 다운로드&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;rubyinstaller-devkit-3.1.5-1-x64.exe 다운로드&lt;br /&gt;
※ ruby는 3.2이상은 오류 발생하므로 3.2이하 버전으로 설치&lt;/li&gt;
  &lt;li&gt;ubyinstaller-devkit-3.1.5-1-x64.exe 설치&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;bundler-다운로드&quot;&gt;bundler 다운로드&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;명령 프롬프트 실행(cmd)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem install bundler&lt;/code&gt; 명령어 실행&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;jekyll-template-설치&quot;&gt;jekyll template 설치&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;template 다운로드&lt;br /&gt;
&lt;a href=&quot;http://jekyllthemes.org/&quot;&gt;jekyll template 사이트&lt;/a&gt;&lt;br /&gt;
※ 세팅 시 editor는 vs code 사용&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;editor(vs code)로 해당 소스 열기&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;template 폴더 &amp;gt; Gemfile에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem &apos;wdm&apos;, &apos;&amp;gt;= 0.1.0&apos;&lt;/code&gt; 붙여놓기&lt;/li&gt;
  &lt;li&gt;상단 메뉴 Terminal &amp;gt; new Terminal 실행&lt;/li&gt;
  &lt;li&gt;Terminal에서 template 위치로 이동 후 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle install&lt;/code&gt; 명령어 실행&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle add webrick&lt;/code&gt; 명령어 실행&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec jekyll serve&lt;/code&gt; 명령어 실행&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;해당-과정을-완료하면-localhost에-template을-올릴-수-있음&quot;&gt;해당 과정을 완료하면 localhost에 template을 올릴 수 있음&lt;/h4&gt;
&lt;p&gt;※ 참고&lt;br /&gt;
&lt;a href=&quot;https://youtu.be/2ClW2LdqP30?si=RN8MKt08In5EU5Lw&quot;&gt;(YouTube) Jekyll 기반의 GitHub Page 생성(1) - 환경설정&lt;/a&gt;&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>한병엽</name>
        
        
      </author>

      

      
        <category term="IT2024" />
      

      
        <summary type="html">it2024 강좌는 여러 절로 구성되어 있습니다. github-page 만들기(1) - localhost jekyll theme 세팅 github-page 만들기(2) - 환경설정 파일 세팅 github-page 만들기(3) - custom css 세팅 github-page 만들기(4) - github page 배포</summary>
      

      
      
    </entry>
  
</feed>
